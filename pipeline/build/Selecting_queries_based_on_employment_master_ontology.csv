notation,employment,query
active_ingredient,http://example.com/resource/active_ingredient,"PREFIX mydata: <http://example.com/resource/>
PREFIX obo: <http://purl.obolibrary.org/obo/>
PREFIX rxnorm: <http://purl.bioontology.org/ontology/RXNORM/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
select 
distinct 
?query_input ?order_id ?source_full_name
where {
    values ?query_input {}
    # example <http://purl.obolibrary.org/obo/CHEBI_28787>
    # nitroglycerin
    values ?source_employment {
        mydata:active_ingredient
    }
    values ?mapped_rxn_employment {
        <http://example.com/resource/rxn_tty/IN>
    }
    values ?source_definer {
        obo:chebi.owl
        <http://purl.obolibrary.org/obo/dron/dron-ingredient.owl>
    }
    graph mydata:employment {
        ?query_input mydata:employment ?source_employment .
    }
    graph mydata:defined_in {
        ?query_input mydata:defined_in ?source_definer .
    }
    # for ChEBI/DrOn ingredient to rxnorm ingredient:
    #   union together direct BioPortal mappings
    #   with assertions from DrOn
    {
        {
            graph mydata:bioportal_mapping {
                ?query_input mydata:bioportal_mapping ?mapped_rxn
            }
        } union {
            graph ?g {
                ?dronprod mydata:transitively_materialized_dron_ingredient ?query_input
            }
            # add triples patterns about the ?dronprod's definer and employment?
            graph mydata:bioportal_mapping {
                ?dronprod mydata:bioportal_mapping ?mapped_rxn
            }
        }
    }
    graph mydata:employment {
        ?mapped_rxn mydata:employment ?mapped_rxn_employment .
    }
    graph mydata:defined_in {
        ?mapped_rxn mydata:defined_in rxnorm: .
    }
    graph rxnorm: {
        ?mapped_rxn  (rxnorm:constitutes|rxnorm:contained_in|rxnorm:has_dose_form|rxnorm:has_doseformgroup|rxnorm:has_form|rxnorm:has_tradename|rxnorm:ingredient_of|rxnorm:ingredients_of|rxnorm:isa|rxnorm:part_of|rxnorm:precise_ingredient_of|rxnorm:quantified_form_of|rxnorm:reformulation_of)* ?rxnprod .
    }
    # find orders for the bare ingredient or products containing the ingredient
    # probably won't find orders for a bare brand name
    {
        {
            graph mydata:elected_mapping {
                ?order mydata:elected_mapping ?mapped_rxn .
            }
        } union {
            graph mydata:elected_mapping {
                ?order mydata:elected_mapping ?rxnprod .
            }
        }
    }
    # get properties of the order
    graph mydata:reference_medications {
        ?order a obo:PDRO_0000024 ;
               mydata:source_full_name ?source_full_name .
    }
    graph mydata:source_med_id  {
        ?order skos:notation ?order_id .
    }
}"
BN,http://example.com/resource/RXNORM_TTY/BN,"prefix mydata: <http://example.com/resource/>
PREFIX rxnorm: <http://purl.bioontology.org/ontology/RXNORM/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX obo: <http://purl.obolibrary.org/obo/>
select 
distinct 
?query_input ?order_id ?source_full_name
where {
    values ?query_input {}
    # example <http://purl.bioontology.org/ontology/RXNORM/202702> <http://purl.bioontology.org/ontology/RXNORM/58827> <http://purl.bioontology.org/ontology/RXNORM/202433>
    # Medrol Prozac Tylenol
    values ?rxemployment {
        <http://example.com/resource/rxn_tty/BN>
    }
    graph mydata:employment {
        ?query_input mydata:employment ?rxemployment .
    }
    values ?source_definer {
        rxnorm:
    }
    graph mydata:defined_in {
        ?query_input mydata:defined_in ?source_definer .
    }
    graph rxnorm: {
        ?query_input  (rxnorm:ingredient_of|rxnorm:isa|rxnorm:contained_in|rxnorm:consists_of|rxnorm:has_quantified_form|rxnorm:reformulated_to)* ?rxnrelated .
        ?rxnrelated skos:prefLabel ?rrpl .
    }
    graph mydata:employment {
        ?rxnrelated mydata:employment ?related_employment .
    }
    graph mydata:elected_mapping {
        ?order mydata:elected_mapping ?rxnrelated .
    }
    # get properties of the order
    graph mydata:reference_medications {
        ?order a obo:PDRO_0000024 ;
               mydata:source_full_name ?source_full_name .
    }
    graph mydata:source_med_id  {
        ?order skos:notation ?order_id .
    }
}"
clinrel_structclass,http://example.com/resource/clinrel_structclass,"PREFIX obo: <http://purl.obolibrary.org/obo/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX mydata: <http://example.com/resource/>
PREFIX rxnorm: <http://purl.bioontology.org/ontology/RXNORM/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
select 
distinct 
?query_input ?order_id ?source_full_name
where {
    values ?query_input {}
    # example <http://purl.obolibrary.org/obo/CHEBI_87631>
    # statin
    values ?definedin {
        obo:chebi.owl
    }
    values ?employment_iri {
        <http://example.com/resource/clinrel_structclass> 
    }
    graph <http://example.com/resource/employment> {
        ?query_input <http://example.com/resource/employment>  
                ?employment_iri .
    }
    graph ?definedin {
        ?chebisubclasses rdfs:subClassOf* ?query_input
    }
    {
        {
            graph mydata:bioportal_mapping {
                ?chebisubclasses mydata:bioportal_mapping ?mapped_rxn
            }
        } union {
            graph mydata:transitively_materialized_dron_ingredient {
                ?dronprod mydata:transitively_materialized_dron_ingredient ?chebisubclasses
            }
            # add triples patterns about the ?dronprod's definer and employment?
            graph mydata:bioportal_mapping {
                ?dronprod mydata:bioportal_mapping ?mapped_rxn
            }
        }
    }
    graph mydata:employment {
        ?mapped_rxn mydata:employment ?mapped_rxn_employment .
    }
    graph mydata:defined_in {
        ?mapped_rxn mydata:defined_in rxnorm: .
    }
    graph rxnorm: {
        ?mapped_rxn  (rxnorm:constitutes|rxnorm:contained_in|rxnorm:has_dose_form|rxnorm:has_doseformgroup|rxnorm:has_form|rxnorm:has_tradename|rxnorm:ingredient_of|rxnorm:ingredients_of|rxnorm:isa|rxnorm:part_of|rxnorm:precise_ingredient_of|rxnorm:quantified_form_of|rxnorm:reformulation_of)* ?rxnprod .
    }
    # find orders for the bare ingredient or products containing the ingredient
    # probably won't find orders for a bare brand name
    {
        {
            graph mydata:elected_mapping {
                ?order mydata:elected_mapping ?mapped_rxn .
            }
        } union {
            graph mydata:elected_mapping {
                ?order mydata:elected_mapping ?rxnprod .
            }
        }
    }
    # get properties of the order
    graph mydata:reference_medications {
        ?order a obo:PDRO_0000024 ;
               mydata:source_full_name ?source_full_name ;
               mydata:source_count ?source_count .
        optional {
            ?order mydata:source_generic_name ?source_generic_name
        }
    }
    graph mydata:source_med_id  {
        ?order skos:notation ?order_id .
    }
}"
curated_role,http://example.com/resource/curated_role,"PREFIX mydata: <http://example.com/resource/>
PREFIX obo: <http://purl.obolibrary.org/obo/>
PREFIX rxnorm: <http://purl.bioontology.org/ontology/RXNORM/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
select 
distinct 
?query_input ?order_id ?source_full_name
where {
    values ?query_input {}
    # example obo:CHEBI_35482
    values ?role_employment {
        mydata:curated_role
    }
    values ?role_definer {
        obo:chebi.owl
    }
    graph mydata:employment {
        ?query_input mydata:employment ?role_employment .
    }
    graph mydata:defined_in {
        ?query_input mydata:defined_in ?role_definer .
    }
    graph mydata:transitive_role_of_class {
        ?solr_mediri mydata:transitive_role_of_class ?query_input .
    }
    values ?source_employment {
        mydata:active_ingredient
    }
    values ?mapped_rxn_employment {
        <http://example.com/resource/rxn_tty/IN>
    }
    values ?source_definer {
        obo:chebi.owl
    }
    graph mydata:employment {
        ?solr_mediri mydata:employment ?source_employment .
    }
    graph mydata:defined_in {
        ?solr_mediri mydata:defined_in ?source_definer .
    }
    # for ChEBI/DrOn ingredient to rxnorm ingredient:
    #   union together direct BioPortal mappings
    #   with assertions from DrOn
    {
        {
            graph mydata:bioportal_mapping {
                ?solr_mediri mydata:bioportal_mapping ?mapped_rxn
            }
        } union {
            graph ?g {
                ?dronprod mydata:transitively_materialized_dron_ingredient ?solr_mediri
            }
            # add triples patterns about the ?dronprod's definer and employment?
            graph mydata:bioportal_mapping {
                ?dronprod mydata:bioportal_mapping ?mapped_rxn
            }
        }
    }
    graph mydata:employment {
        ?mapped_rxn mydata:employment ?mapped_rxn_employment .
    }
    graph mydata:defined_in {
        ?mapped_rxn mydata:defined_in rxnorm: .
    }
    graph rxnorm: {
        ?mapped_rxn  (rxnorm:constitutes|rxnorm:contained_in|rxnorm:has_dose_form|rxnorm:has_doseformgroup|rxnorm:has_form|rxnorm:has_tradename|rxnorm:ingredient_of|rxnorm:ingredients_of|rxnorm:isa|rxnorm:part_of|rxnorm:precise_ingredient_of|rxnorm:quantified_form_of|rxnorm:reformulation_of)* ?rxnprod .
    }
    # find orders for the bare ingredient or products containing the ingredient
    # probably won't find orders for a bare brand name
    {
        {
            graph mydata:elected_mapping {
                ?order mydata:elected_mapping ?mapped_rxn .
            }
        } union {
            graph mydata:elected_mapping {
                ?order mydata:elected_mapping ?rxnprod .
            }
        }
    }
    # get properties of the order
    graph mydata:reference_medications {
        ?order a obo:PDRO_0000024 ;
               mydata:source_full_name ?source_full_name .
    }
    graph mydata:source_med_id  {
        ?order skos:notation ?order_id .
    }
}"
IN,http://example.com/resource/RXNORM_TTY/IN,"PREFIX mydata: <http://example.com/resource/>
PREFIX obo: <http://purl.obolibrary.org/obo/>
PREFIX rxnorm: <http://purl.bioontology.org/ontology/RXNORM/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
select 
distinct 
?query_input ?order_id ?source_full_name
where {
    values ?query_input {}
    # example <http://purl.bioontology.org/ontology/RXNORM/4493> 
    #  Fluoxetine
    # IN BN (has seperate query already) MIN (incompatibel) PIN (incompatible)
    #        <http://purl.bioontology.org/ontology/RXNORM/58827>
    #        <http://purl.bioontology.org/ontology/RXNORM/227224>
    #        <http://purl.bioontology.org/ontology/RXNORM/611247>
    values ?mapped_rxn_employment {
        <http://example.com/resource/rxn_tty/IN>
    }
    values ?source_definer {
        <http://purl.bioontology.org/ontology/RXNORM/>
    }
    graph mydata:employment {
        ?query_input mydata:employment ?mapped_rxn_employment .
    }
    graph mydata:defined_in {
        ?query_input mydata:defined_in ?source_definer .
    }
    graph rxnorm: {
        ?query_input  (rxnorm:constitutes|rxnorm:contained_in|rxnorm:has_dose_form|rxnorm:has_doseformgroup|rxnorm:has_form|rxnorm:has_tradename|rxnorm:ingredient_of|rxnorm:ingredients_of|rxnorm:isa|rxnorm:part_of|rxnorm:precise_ingredient_of|rxnorm:quantified_form_of|rxnorm:reformulation_of)* ?rxnprod .
    }
    # find orders for the bare ingredient or products containing the ingredient
    # probably won't find orders for a bare brand name
    graph mydata:elected_mapping {
        ?order mydata:elected_mapping ?query_input .
    }
    # get properties of the order
    graph mydata:reference_medications {
        ?order a obo:PDRO_0000024 ;
               mydata:source_full_name ?source_full_name .
    }
    graph mydata:source_med_id  {
        ?order skos:notation ?order_id .
    }
}"
product,http://example.com/resource/product,"PREFIX mydata: <http://example.com/resource/>
PREFIX obo: <http://purl.obolibrary.org/obo/>
PREFIX rxnorm: <http://purl.bioontology.org/ontology/RXNORM/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rxn_tty: <http://example.com/resource/rxn_tty/>
select 
distinct 
?query_input ?order_id ?source_full_name
where {
    values ?query_input {}
    # example <http://purl.obolibrary.org/obo/DRON_00082861>
    # value or values come from upstream input, like user-requested Solr search
    values ?dpemp {
        mydata:product
    }
    values ?dpdi {
        <http://purl.obolibrary.org/obo/dron/dron-ingredient.owl> <http://purl.obolibrary.org/obo/dron/dron-rxnorm.owl>
    }
    graph mydata:employment {
        ?query_input mydata:employment ?dpemp
    }
    graph mydata:defined_in {
        ?query_input mydata:defined_in ?dpdi
    }
    graph mydata:bioportal_mapping {
        ?query_input mydata:bioportal_mapping ?mapped_rxn
    }
    # the next two constraints can be applied in the SPARQL query, or could be ensured by some upstream logic
    values ?rxemployment {
        rxn_tty:SBD rxn_tty:SCD rxn_tty:SCDF
    }
    values ?source_definer {
        rxnorm:
    }
    graph mydata:employment {
        ?mapped_rxn mydata:employment ?rxemployment .
    }
    graph mydata:defined_in {
        ?mapped_rxn mydata:defined_in ?source_definer .
    }
    #    #    # find orders for the bare ingredient or products containing the ingredient
    #    #    # probably won't find orders for a bare brand name
    graph mydata:elected_mapping {
        ?order mydata:elected_mapping ?mapped_rxn .
    }
    #    # get properties of the order
    graph mydata:reference_medications {
        ?order a obo:PDRO_0000024 ;
               mydata:source_full_name ?source_full_name .
    }
    graph mydata:source_med_id  {
        ?order skos:notation ?order_id .
    }
}"
SBD,http://example.com/resource/RXNORM_TTY/SBD,"PREFIX mydata: <http://example.com/resource/>
PREFIX obo: <http://purl.obolibrary.org/obo/>
PREFIX rxnorm: <http://purl.bioontology.org/ontology/RXNORM/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rxn_tty: <http://example.com/resource/rxn_tty/>
select 
distinct 
?query_input ?rxemployment ?order_id ?source_full_name
where {
    values ?query_input {}
    # example <http://purl.bioontology.org/ontology/RXNORM/209459>
    # Acetaminophen 500 MG Oral Tablet [Tylenol]
    # value or values come from upstream input, like user-requested Solr search
    # the next two constraints can be applied in the SPARQL query, or could be ensured by some upstream logic
#    values ?rxemployment {
#        rxn_tty:SBD rxn_tty:SCD rxn_tty:SCDF
#    }
    values ?source_definer {
        rxnorm:
    }
    graph mydata:employment {
        ?query_input mydata:employment ?rxemployment .
    }
    graph mydata:defined_in {
        ?query_input mydata:defined_in ?source_definer .
    }
    #    # find orders for the bare ingredient or products containing the ingredient
    #    # probably won't find orders for a bare brand name
    graph mydata:elected_mapping {
        ?order mydata:elected_mapping ?query_input .
    }
    #    # get properties of the order
    graph mydata:reference_medications {
        ?order a obo:PDRO_0000024 ;
               mydata:source_full_name ?source_full_name .
    }
    graph mydata:source_med_id  {
        ?order skos:notation ?order_id .
    }
}"
SCD,http://example.com/resource/RXNORM_TTY/SCD,"PREFIX mydata: <http://example.com/resource/>
PREFIX obo: <http://purl.obolibrary.org/obo/>
PREFIX rxnorm: <http://purl.bioontology.org/ontology/RXNORM/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rxn_tty: <http://example.com/resource/rxn_tty/>
select 
distinct 
?query_input ?rxemployment ?order_id ?source_full_name
where {
    values ?query_input {}
    # example <http://purl.bioontology.org/ontology/RXNORM/209459>
    # Acetaminophen 500 MG Oral Tablet [Tylenol]
    # value or values come from upstream input, like user-requested Solr search
    # the next two constraints can be applied in the SPARQL query, or could be ensured by some upstream logic
#    values ?rxemployment {
#        rxn_tty:SBD rxn_tty:SCD rxn_tty:SCDF
#    }
    values ?source_definer {
        rxnorm:
    }
    graph mydata:employment {
        ?query_input mydata:employment ?rxemployment .
    }
    graph mydata:defined_in {
        ?query_input mydata:defined_in ?source_definer .
    }
    #    # find orders for the bare ingredient or products containing the ingredient
    #    # probably won't find orders for a bare brand name
    graph mydata:elected_mapping {
        ?order mydata:elected_mapping ?query_input .
    }
    #    # get properties of the order
    graph mydata:reference_medications {
        ?order a obo:PDRO_0000024 ;
               mydata:source_full_name ?source_full_name .
    }
    graph mydata:source_med_id  {
        ?order skos:notation ?order_id .
    }
}"
SCDF,http://example.com/resource/RXNORM_TTY/SCDF,"PREFIX mydata: <http://example.com/resource/>
PREFIX obo: <http://purl.obolibrary.org/obo/>
PREFIX rxnorm: <http://purl.bioontology.org/ontology/RXNORM/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rxn_tty: <http://example.com/resource/rxn_tty/>
select 
distinct 
?query_input ?rxemployment ?order_id ?source_full_name
where {
    values ?query_input {}
    # example <http://purl.bioontology.org/ontology/RXNORM/209459>
    # Acetaminophen 500 MG Oral Tablet [Tylenol]
    # value or values come from upstream input, like user-requested Solr search
    # the next two constraints can be applied in the SPARQL query, or could be ensured by some upstream logic
#    values ?rxemployment {
#        rxn_tty:SBD rxn_tty:SCD rxn_tty:SCDF
#    }
    values ?source_definer {
        rxnorm:
    }
    graph mydata:employment {
        ?query_input mydata:employment ?rxemployment .
    }
    graph mydata:defined_in {
        ?query_input mydata:defined_in ?source_definer .
    }
    #    # find orders for the bare ingredient or products containing the ingredient
    #    # probably won't find orders for a bare brand name
    graph mydata:elected_mapping {
        ?order mydata:elected_mapping ?query_input .
    }
    #    # get properties of the order
    graph mydata:reference_medications {
        ?order a obo:PDRO_0000024 ;
               mydata:source_full_name ?source_full_name .
    }
    graph mydata:source_med_id  {
        ?order skos:notation ?order_id .
    }
}"