PREFIX mydata: <http://example.com/resource/>
PREFIX obo: <http://purl.obolibrary.org/obo/>
PREFIX rxnorm: <http://purl.bioontology.org/ontology/RXNORM/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rxn_tty: <http://example.com/resource/rxn_tty/>
select 
distinct
?order_id ?source_full_name
where {
    # value or values come from upstream input, like user-requested Solr search
    values ?dronprod {
        <http://purl.obolibrary.org/obo/DRON_00082861>
    }
    values ?dpemp {
        mydata:product
    }
    values ?dpdi {
        <http://purl.obolibrary.org/obo/dron/dron-ingredient.owl> <http://purl.obolibrary.org/obo/dron/dron-rxnorm.owl>
    }
    graph mydata:employment {
        ?dronprod mydata:employment ?dpemp
    }
    graph mydata:defined_in {
        ?dronprod mydata:defined_in ?dpdi
    }
    graph mydata:bioportal_mapping {
        ?dronprod mydata:bioportal_mapping ?mapped_rxn
    }
    # the next two constraints can be applied in the SPARQL query, or could be ensured by some upstream logic
    values ?rxemployment {
        rxn_tty:SBD rxn_tty:SCD rxn_tty:SCDF
    }
    values ?source_definer {
        rxnorm:
    }
    graph mydata:employment {
        ?mapped_rxn mydata:employment ?rxemployment .
    }
    graph mydata:defined_in {
        ?mapped_rxn mydata:defined_in ?source_definer .
    }
    #    #    # find orders for the bare ingredient or products containing the ingredient
    #    #    # probably won't find orders for a bare brand name
    graph mydata:elected_mapping {
        ?order mydata:elected_mapping ?mapped_rxn .
    }
    #    # get properties of the order
    graph mydata:reference_medications {
        ?order a obo:PDRO_0000024 ;
               mydata:source_full_name ?source_full_name .
    }
    graph mydata:source_med_id  {
        ?order skos:notation ?order_id .
    }
}
